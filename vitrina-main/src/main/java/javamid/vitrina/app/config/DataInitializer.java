package javamid.vitrina.app.config;


import javamid.vitrina.app.dao.Basket;
import javamid.vitrina.app.dao.User;
import javamid.vitrina.app.repositories.BasketRepository;
import javamid.vitrina.app.repositories.UserRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.annotation.Bean;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
public class DataInitializer {

  private final UserRepository userRepository;
  private final BasketRepository basketRepository;
  private final PasswordEncoder passwordEncoder;

  public DataInitializer(UserRepository userRepository,
                         BasketRepository basketRepository,
                         PasswordEncoder passwordEncoder) {
    this.userRepository = userRepository;
    this.basketRepository = basketRepository;
    this.passwordEncoder = passwordEncoder;
  }



  @Bean
  public CommandLineRunner initTestUsers(UserRepository userRepository,
                                         BasketRepository basketRepository,
                                         PasswordEncoder passwordEncoder) {
    return args -> {
      Mono<Void> admin = createUserWithBasket("admin", "admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" );
      Mono<Void> user1 = createUserWithBasket("user1", "aaa", "–ü–µ—Ä–≤—ã–π –ü–æ–ª—å–∑–∞–∫" );
      Mono<Void> user2 = createUserWithBasket("user2", "bbb", "–í—Ç–æ—Ä–æ–π –ü–æ–ª—å–∑–∞–∫" );
      Mono<Void> user3 = createUserWithBasket("user3", "ccc", "–¢—Ä–µ—Ç–∏–π –ü–æ–ª—å–∑–∞–∫" );
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      admin.then(user1).then(user2).then(user3)
              .subscribe(
                      null,
                      error -> System.err.println("–û—à–∏–±–∫–∞: " + error),
                      () -> System.out.println("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
              );
    };
  }




  private Mono<Void> createUserWithBasket(String login, String password, String name ) {
    return userRepository.findByLogin(login)
            .switchIfEmpty(Mono.defer(() -> {
              System.out.println("‚ûï –°–æ–∑–¥–∞—é: " + login);

              // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              User user = new User();
              user.setName(name);
              user.setLogin(login);
              user.setPassword( passwordEncoder.encode(password));

              // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              return userRepository.save(user)
                      .flatMap(savedUser -> {
                        System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: " + savedUser.getId());

                        // 3. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                        Basket basket = new Basket();
                        basket.setUserId(savedUser.getId());

                        return basketRepository.save(basket)
                                .doOnNext(savedBasket -> {
                                  System.out.println("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: " + savedBasket.getId());

                                  // 4. –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π
                                  savedUser.setBasketId(savedBasket.getId());
                                })
                                .thenReturn(savedUser);
                      })
                      .flatMap(userWithBasket -> {
                        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å basketId
                        System.out.println("üîÑ –°–≤—è–∑—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π");
                        return userRepository.save(userWithBasket);
                      });
            }))
            .then()
            .doOnSuccess(v -> System.out.println("‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: " + login));
  }




  /*
  @Bean
  public CommandLineRunner initTestUsers() {
     return args ->

  {
    String username = "user1";
    String rawPassword = "aaa";
    String name = "–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–∞–∫";

    userRepository.findByLogin(username)
            .switchIfEmpty(Mono.defer(() -> {
              System.out.println("‚ûï –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—Ä–∑–∏–Ω—É: " + username);

              // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              User user = new User();
              user.setName(name);
              user.setLogin(username);
              user.setPassword(passwordEncoder.encode(rawPassword));

              // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              return userRepository.save(user)
                      .flatMap(savedUser -> {
                        // 3. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                        Basket basket =  new Basket();
                        basket.setUserId(savedUser.getId());

                        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
                        return basketRepository.save(basket)
                                .doOnNext(savedBasket -> {
                                  // 5. –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π
                                  savedUser.setBasketId(savedBasket.getId());
                                })
                                .thenReturn(savedUser);
                      })
                      .flatMap(userWithBasket ->
                              // 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π
                              userRepository.save(userWithBasket)
                      );
            }))
            .then()
            .subscribe(
                    null,
                    error -> System.err.println("–û—à–∏–±–∫–∞: " + error),
                    () -> System.out.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            );
  };

}
*/





  /*
  @Bean
  public CommandLineRunner initTestUsers(UserRepository userRepository, PasswordEncoder passwordEncoder) {
    return args -> {
      String username = "user1";
      String rawPassword = "aaa";

      userRepository.findByLogin(username)
              .flatMap(existingUser -> {
                System.out.println("‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                return Mono.empty();
              })
              .switchIfEmpty(Mono.defer(() -> {
                System.out.println("‚ûï –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
                User user = new User( "–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", username,
                        passwordEncoder.encode(rawPassword));
                return userRepository.save(user);
              }))
              .then()
              .subscribe( // –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫
                      null,
                      error -> System.err.println("–û—à–∏–±–∫–∞: " + error),
                      () -> System.out.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
              );
    };
  }

   */


}