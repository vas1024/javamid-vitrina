package javamid.vitrina.app.services;



import javamid.vitrina.app.repositories.UserRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

/*
  @Service
  public class UserDetailsService implements ReactiveUserDetailsService {

    private final UserRepository userRepository;

    public UserDetailsService(UserRepository userRepository) {
      this.userRepository = userRepository;
    }

    @Override
    public Mono<UserDetails> findByUsername(String login) {
      return userRepository.findByLogin(login)
              .cast(UserDetails.class)
              .switchIfEmpty(Mono.error(
                      new UsernameNotFoundException("User not found: " + login )
              ));
    }

  }
*/



@Service
public class UserDetailsService implements ReactiveUserDetailsService {

  private final UserRepository userRepository;

  // –î–æ–±–∞–≤–ª—è–µ–º PasswordEncoder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π
  public UserDetailsService(UserRepository userRepository) {
    this.userRepository = userRepository;
  }

  @Override
  public Mono<UserDetails> findByUsername(String login) {
    System.out.println("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + login);

    return userRepository.findByLogin(login)
            .doOnNext(user -> {
              System.out.println("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.getLogin());
              System.out.println("üîê –•–µ—à –ø–∞—Ä–æ–ª—è –≤ –ë–î: " + user.getPassword());
//              System.out.println("–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + encoder.);
            })
            .switchIfEmpty(Mono.defer(() -> {
              System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + login);
              return Mono.error(new UsernameNotFoundException("User not found: " + login));
            }))
            .cast(UserDetails.class)
            .doOnError(e -> System.out.println("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage()));
  }
}




